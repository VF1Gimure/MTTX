data:
  image_folder_path: "data/raw/KnightX_exp_dataset"
  processed: "data/processed"
  models: "data/model/runs"
  mean_std_filename: "mean_std.csv"
  dlib68: "data/model/shape_predictor_68_face_landmarks.dat"

image:
  size_x: 224
  size_y: 224

training:
  epochs: 15
  learning_rate: 1e-4
  batch_size: 32
  device_models_mps: ["custom_cnn", "mlp", "deep_capsule", "capsule", "dense"]
  transfer_learning_models: ["efficientnet", "mobilenet", "resnet18", "vgg16", "vit"]

models:
  custom_cnn:
    in_channels: 2
    channel1: 32
    channel2: 64
    out_features: 8
  mlp:
    in_channels: 2
    patch_size: 16
    hidden_dim: 256
    num_layers: 3
    num_classes: 8
  deep_capsule:
    in_channels: 2
    conv1_out: 32
    conv2_out: 64
    capsule_dim: 8
    num_capsules: 32
    num_classes: 8
  capsule:
    in_channels: 2
    conv_out: 256
    capsule_dim: 8
    num_capsules: 32
    num_classes: 8
  dense:
    in_channels: 2
    growth_rate: 16
    num_layers: 12
    out_features: 8
    epochs: 30
  densenet:
    in_channels: 2
    growth_rate: 24  # Slightly larger than `dense`
    num_layers: 12  # More depth
    out_features: 8
    reduction: 0.2  # Standard DenseNet uses 0.5
    drop_rate: 0.0
    epochs: 30
  efficientnet:
    freeze: ["efficientnet.features"]
    unfreeze: ["efficientnet.classifier"]
  mobilenet:
    freeze: ["mobilenet.features"]
    unfreeze: ["mobilenet.classifier"]
  resnet18:
    freeze: ["resnet"]
    unfreeze: ["resnet.fc"]
  vgg16:
    freeze: ["vgg.features"]
    unfreeze: ["vgg.classifier"]
  vit:
    freeze: ["vit.encoder"]
    unfreeze: ["vit.heads"]
